<!DOCTYPE html>
<html lang="en">
<head>
    <!-- "StAuth10244: I Mohammad Zaid Pathan, 000912891 certify that this material is my original work. No other person's work has been used without due acknowledgement. I have not made my work available to anyone else." -->

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hamilton Tourist Map</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body {
            background-color: lightblue;
            font-family: 'Arial', sans-serif;
        }
        #map {
            height: 500px;
            width: 100%;
            border-radius: 10px;
            border: 2px solid black;
        }
        .navbar {
            background-color: darkslategray;
            color: white;
            padding: 15px 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .navbar h1 {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
            font-family: Georgia, 'Times New Roman', Times, serif;
        }

        .btn-custom {
            margin: 5px;
            background-color: darkslategrey;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
        }
        .form-control, .form-select {
            margin: 5px 0;
            border-radius: 5px;
        }
        @media (max-width: 768px) {
            #map {
                height: 300px;
            }
            .navbar h1 {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <div class="navbar text-center">
        <h1>Hamilton Tourist Map</h1>
    </div>

    <!-- Main Container -->
    <div class="container mt-4">
        <!-- Map -->
        <div id="map"></div>
    </div>

    <!-- Geolocation Button -->
    <div class="text-center">
        <button id="geoButton" class="btn btn-custom">Find My Location</button>
    </div>

    <!-- Filter Buttons -->
    <div class="mt-4 text-center">
        <h3>Filter Locations</h3>
        <button class="btn btn-custom" onclick="filterMarkers('museum')">Museums</button>
        <button class="btn btn-custom" onclick="filterMarkers('park')">Parks</button>
        <button class="btn btn-custom" onclick="filterMarkers('waterfall')">Waterfalls</button>
        <button class="btn btn-custom" onclick="filterMarkers('all')">Show All</button>
    </div>

    <!-- Add Location Form -->
    <div class="mt-4">
        <h3 class="text-center">Add a New Location</h3>
        <form id="locationForm" class="text-center">
            <input type="text" id="address" placeholder="Enter address" class="form-control mb-2">
            <select id="category" class="form-select mb-2">
                <option value="museum">Museum</option>
                <option value="park">Park</option>
                <option value="waterfall">Waterfall</option>
            </select>
            <button type="submit" class="btn btn-custom">Add Marker</button>
        </form>
    </div>

    <!-- Directions -->
    <div class="mt-4 text-center">
        <h3>Get Directions</h3>
        <select id="destination" class="form-select mb-2">
            <!-- Options will be dynamically populated -->
        </select>
        <button onclick="getDirections()" class="btn btn-custom">Get Directions</button>
    </div>

    <!-- Google Maps API -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCJoI1c1fM9CbWQoKZ2gRLNbxhE4QhynIg&callback=initMap"></script>
    <script>
        let map;
        let markers = [];
    
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 43.2387, lng: -79.881 },
                zoom: 12
            });

            const locations = [
                { lat: 43.2567, lng: -79.8693, name: "Art Gallery of Hamilton", category: "museum", address: "123 King Street West, Hamilton, ON" },
                { lat: 43.268528, lng: -79.885009, name: "Dundurn Castle", category: "museum", address: "610 York Boulevard, Hamilton, ON" },
                { lat: 43.2892498, lng: -79.8918888, name: "Royal Botanical Gardens", category: "park", address: "680 Plains Road West, Burlington, ON" },
                { lat: 43.269798, lng: -79.870377, name: "Bayfront Park", category: "park", address: "200 Harbour Front Drive, Hamilton, ON" },
                { lat: 43.2731808, lng: -79.8671916, name: "Pier 4", category: "park", address: "64 Leander Drive, Hamilton, ON" },
                { lat: 43.2507, lng: -79.8712, name: "Whitehern Historic House & Garden", category: "museum", address: "41 Jackson Street West, Hamilton, ON" },
                { lat: 43.1996747, lng: -79.8209044, name: "Albian Falls", category: "waterfall", address: "Mountain Brow Boulevard, Hamilton, ON" },
                { lat: 43.2435675, lng: -79.8257578, name: "Gage Park", category: "park", address: "1000 Main Street East, Hamilton, ON" },
                { lat: 43.2401535, lng: -79.9602137, name: "Tiffany Falls", category: "waterfall", address: "Wilson Street East, Hamilton, ON" },
                { lat: 43.256604, lng: -79.772090, name: "Hamilton Museum of Steam & Technology", category: "museum", address: "900 Woodward Avenue, Hamilton, ON" },
                { lat: 43.23888962337215, lng: -79.97955423855771, name: "Sherman Falls", category: "waterfall", address: "Sherman Falls Trail, Hamilton, ON" },
                { lat: 43.2816129, lng: -79.9791133, name: "Dundas Peak", category: "park", address: "Harvest Road, Dundas, ON" },
            ];

            const destinationSelect = document.getElementById('destination');
            locations.forEach(location => {
                const option = document.createElement('option');
                option.value = `${location.lat},${location.lng}`;
                option.innerText = location.name;
                destinationSelect.appendChild(option);
            });

            locations.forEach(location => {
                const marker = new google.maps.Marker({
                    position: { lat: location.lat, lng: location.lng },
                    map: map,
                    title: location.name,
                    category: location.category
                });

                const infowindow = new google.maps.InfoWindow({
                    content: `<strong>${location.name}</strong><br>Category: ${location.category}<br>Address: ${location.address}`
                });

                marker.addListener('click', () => {
                    infowindow.open(map, marker);
                });

                markers.push(marker);
            });
        }

        document.getElementById('geoButton').addEventListener('click', () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    const userMarker = new google.maps.Marker({
                        position: userLocation,
                        map: map,
                        title: "Your Location",
                        icon: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                    });

                    map.setCenter(userLocation);
                }, () => {
                    alert("Unable to retrieve your location.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        });

        function filterMarkers(category) {
            markers.forEach(marker => {
                if (category === 'all' || marker.category === category) {
                    marker.setVisible(true);
                } else {
                    marker.setVisible(false);
                }
            });
        }

        document.getElementById('locationForm').addEventListener('submit', (event) => {
            event.preventDefault();

            const address = document.getElementById('address').value;
            const category = document.getElementById('category').value;

            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ address: address }, (results, status) => {
                if (status === 'OK') {
                    const location = results[0].geometry.location;

                    const newMarker = new google.maps.Marker({
                        position: location,
                        map: map,
                        title: address,
                        category: category
                    });

                    const infowindow = new google.maps.InfoWindow({
                        content: `<strong>${address}</strong><br>Category: ${category}`
                    });

                    newMarker.addListener('click', () => {
                        infowindow.open(map, newMarker);
                    });

                    markers.push(newMarker);
                } else {
                    alert("Geocode was not successful for the following reason: " + status);
                }
            });
        });

        function getDirections() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    const destination = document.getElementById('destination').value.split(',');

                    const directionsService = new google.maps.DirectionsService();
                    const directionsRenderer = new google.maps.DirectionsRenderer();
                    directionsRenderer.setMap(map);

                    directionsService.route(
                        {
                            origin: userLocation,
                            destination: { lat: parseFloat(destination[0]), lng: parseFloat(destination[1]) },
                            travelMode: 'DRIVING'
                        },
                        (response, status) => {
                            if (status === 'OK') {
                                directionsRenderer.setDirections(response);
                            } else {
                                alert("Directions request failed due to " + status);
                            }
                        }
                    );
                }, () => {
                    alert("Unable to retrieve your location.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }
    </script>
</body>
</html>